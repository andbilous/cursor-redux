{"version":3,"sources":["redux/posts/types.js","redux/posts/reducer.js","redux/rootReducer.js","redux/store.js","containers/Form.jsx","redux/posts/actions.js","components/Post.jsx","containers/Posts.jsx","App.js","serviceWorker.js","index.js"],"names":["types","ADD_POST","initialState","posts","name","photo","nickname","content","date","image","postsReducer","state","action","type","payload","rootReducer","combineReducers","middleware","logger","store","createStore","applyMiddleware","style","row","marginTop","FormContainerRedux","connect","dispatch","addPost","post","props","useState","text","setText","link","setLink","author","setAuthor","Form","FormGroup","Label","for","sm","size","Col","Input","onChange","e","target","value","id","placeholder","bsSize","Button","onClick","Date","toString","color","styles","container","marginLeft","borderRadius","backgroundColor","paddingTop","paddingLeft","width","height","display","flexDirection","marginBottom","title","justifyContent","userContent","logo","header","Post","src","className","PostsContainer","map","i","key","App","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4afe925.chunk.js","sourcesContent":[" const types={\n  ADD_POST:'ADD_POST'\n}\n\nexport default types","import types from './types';\n\n// <Post author={{\n//   name: \"Anakin skywalker\",\n//   photo: ANAKIN_IMAGE,\n//   nickname: \"@dart_vader\"\n// }}\n// content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n// image={RAY_IMAGE}\n// date={\"26 февр.\"}\n\nconst initialState = {\n    posts:[\n      {\n        name:'Anakin skywalker1',\n        photo: 'https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg',\n        nickname: \"@dart_vader1\",\n        content:\"WTF? Who is Ray? Why she is Skywalker1? Luke...?\",\n        date:\"22 февр.\",\n        image:'https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale'\n      },\n      {\n        name:'Anakin skywalker2',\n        photo: 'https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg',\n        nickname: \"@dart_vader2\",\n        content:\"WTF? Who is Ray? Why she is Skywalker2? Luke...?\",\n        date:\"13 февр.\",\n        image:'https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale'\n      },\n      {\n        name:'Anakin skywalker3',\n        photo: 'https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg',\n        nickname: \"@dart_vader3\",\n        content:\"WTF? Who is Ray? Why she is Skywalker3? Luke...?\",\n        date:\"26 февр.\",\n        image:'https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale'\n      },\n    ]\n}\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_POST:\n      return {\n        ...state,\n        posts: [...state.posts,action.payload]\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;","import { combineReducers } from 'redux';\nimport postsReducer from './posts/reducer';\n\nexport const rootReducer = combineReducers({\n  postsReducer\n});","import { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\n\nimport { rootReducer } from './rootReducer';\n\nconst middleware = [logger];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));","import React, { useState } from 'react';\nimport { Col, Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport {addPost} from '../redux/posts/actions';\n\nconst FormContainer = (props) => {\n  const [text,setText]=useState('');\n  const [link,setLink]=useState('');\n  const [author,setAuthor]=useState('');\n  return (\n    <Form>\n    <FormGroup row style={style.row}>\n      <Label for=\"exampleEmail\" sm={2} size=\"lg\">Post Text</Label>\n      <Col sm={10}>\n        <Input onChange={(e) => setText(e.target.value)} type=\"text\" name=\"text\" id=\"postText\" placeholder=\"Post text\" bsSize=\"lg\" />\n      </Col>\n    </FormGroup>\n    <FormGroup row style={style.row}>\n      <Label for=\"exampleEmail2\" sm={2}>Post Link</Label>\n      <Col sm={10}>\n      <Input onChange={(e) => setLink(e.target.value)}\n       type=\"text\" name=\"link\" id=\"postLink\" placeholder=\"Post link\" bsSize=\"lg\" />\n      </Col>\n    </FormGroup>\n    <FormGroup style={style.row}>\n        <Label for=\"exampleCustomSelect\">Author</Label>\n        <Input onChange={(e) => setAuthor(e.target.value)} type=\"select\" id=\"exampleCustomSelect\" name=\"customSelect\">\n          <option value='@dart_vader1'>@dart_vader1</option>\n          <option value='@dart_vader2'>@dart_vader2</option>\n          <option value='@dart_vader3'>@dart_vader3</option>\n        </Input>\n      </FormGroup>\n      <Button \n        onClick={()=>{\n          props.addPost(\n            {\n              name:author,\n              photo: 'https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg',\n              nickname: author,\n              content:text,\n              date:new Date().toString,\n              image:link\n            }\n          )\n        }}\n      color=\"primary\">Create Post</Button>\n  </Form>)\n}\n\nconst style={\n  row:{\n    marginTop: '30px'\n  }\n}\n\nconst FormContainerRedux = connect(\n  (state) => ({\n    posts: state.postsReducer.posts,\n  }), (dispatch) => ({\n    addPost: (post) => dispatch(addPost(post)),\n    // goToContactsPage: () => dispatch(goToContactsPage()),\n    // setChatId: (id) => dispatch(setChatId(id)),\n    // goToMessagesPage: () => dispatch(goToMessagesPage()),\n    // loadMessages: (items) => dispatch(loadMessages(items))\n  })\n)(FormContainer);\nexport { FormContainerRedux as Form };\n","import types from './types';\n\nexport const addPost = (post)=>({\n    type:  types.ADD_POST,\n    payload: post\n})","import React from 'react';\n\n\nconst Post = (props) => {\n  return (\n    <div style={styles.container}>\n    <section style={styles.header}>\n      <img style={styles.logo} src={props.photo}/>\n      <div style={styles.userContent}>\n        <div style={styles.title}>\n          <span style={styles.name}>{props.name}</span>\n          <span>{props.nickname}</span>\n          <i className=\"fa fa-check\"></i>\n        <span>{props.date}</span>\n          </div>\n        <p style={styles.content}>{props.content}</p>\n        <img src={props.image} style={styles.image}/>\n        </div>\n    </section>\n    </div>\n  )\n \n}\nconst styles = {\n  container:{\n    marginLeft: '400px',\n    marginTop: '20px',\n    borderRadius: '10%',\n    backgroundColor:'grey',\n    paddingTop:'10px',\n    paddingLeft:'10px',\n    width: '450px',\n    height: '300px',\n    display:'flex',\n    flexDirection: 'column',\n    marginBottom:'50px'\n  },\n  title:{\n    width: '300px',\n    display:'flex',\n    justifyContent:'space-between'\n  },\n  userContent:{\n    marginLeft: '10px',\n    display:'flex',\n    flexDirection: 'column'\n  },\n  logo:{\n    width:'70px',\n    height: '70px',\n    borderRadius: '50%'\n  },\n  image:{\n    width:'90%',\n    height: '200px',\n    borderRadius: '10%',\n    marginTop:'10px'\n  },\n  header:{\n      display: 'flex'\n  },\n  name:{\n    color:'white'\n  },\n  content: {\n    color: 'white'\n  }\n}\n\nexport default Post;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Post from '../components/Post';\n\n\nconst Posts = (props) =>{\n  return (\n    <div>\n      {props.posts.map((post,i)=>(\n        <Post\n        key ={i}\n        name={post.name}\n        photo={post.photo}\n        nickname={post.nickname}\n        date={post.date}\n        content={post.content}\n        image={post.image}\n        />\n      ))}\n    </div>\n  )\n}\nconst PostsContainer = connect(\n  (state) => ({\n    posts: state.postsReducer.posts,\n  }), (dispatch) => ({})\n)(Posts);\nexport { PostsContainer as Posts};\n\n\n","import React from 'react';\nimport './App.css';\nimport {Row,Col} from 'reactstrap';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport {Form} from './containers/Form';\nimport {Posts} from './containers/Posts'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <Row>\n        <Col><Form/></Col>\n      </Row>\n      <Row>\n        <Col><Posts style={{marginTop:'100px'}}/></Col>\n      </Row>\n   \n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}